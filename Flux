一个Flux应用主要包含四个部分：
the dispatcher
处理动作分发，维护Store之间的依赖关系

the stores
数据和逻辑部分

the views
React组件，这一层可以看做controller-views，作为师徒同时响应用户交互

the actions
提供给dispatcher传递数据给store

单向数据流
Action->Dispatcher->Store->View-Action->Dispatcher

流程如下：
1.首先要有action，通过定义一些action creator方法根据需要创建Action提供给dispatcher
2.View层通过用户交互会触发Action
3.Dispatcher会分发触发的Action给所有注册的Store的回调函数
4.Store毁掉函数根据接收的Action更新自身数据之后会触发一个change事件通知View数据更改了
5.View会坚挺这个change事件，拿到对应的新数据并调用setState更新组件UI

知识点归纳：
Dispatcher: 一个应用只需要一个dispatcher作为分发中心，管理所有数据流向，分发动作给Store，没有太多其他的逻辑。
Dispatcher分发动作给Store注册的回调函数
API：
register(function callback):string 注册回调函数，返回一个token供在waitFor()使用
unregister(string id):void 通过token移除回调
waitFor(array ids):void 在指定的回调函数执行之后才执行当前回调，这个方法只能在分发动作的回调函数中使用。
dispatch(object payload):void 分发动作payload给所有注册回调
isDispatching():boolean 返回Dispatcher当前是否处在分发的状态

Dispatcher只是一个粘合剂，剩余的Store、View、Action需要按具体需求去实现

Action
通过定义一些action creator方法创建action，这些方法用来暴露给外部调用，通过dispatch分发对应的动作

Store
Stores包含应用的状态和逻辑，不同的Store管理应用中不同部分的状态。
